#!/usr/bin/env bash

# upnup is a command line application that automatically generates a variety of
# open source licenses or license headers for specified files. To see more
# extensive documentation, please see the man page: man upnup

printhelp () {
cat << EOM
Usage: upnup [options] [command]
Options:
 -V, --version              output the version number
 -h, --help                 output usage information"
 -u, --user [user]          The user/organization who holds the license
 -y, --year [year]          The year the license is in effect
 -f, --file <file>          The file to add a header to
Commands:
 list|l                     List all available licenses
 put|p [options] <license>  Put a license in this directory
Notes:
 if used, -f flag must always come before p command
 call upnup from root of project when using -f flag
 projectname in headers defaults to current directory name
Examples:
 upnup p mit
 upnup -u "john doe" -y 2021 p bsd-3-clause
 upnup -f agpl-3.0 p src/test.js
 upnup -u "john doe" -y 2021 -f cc0-1.0 p src/main/file.py
See man page for details:
 man upnup
EOM
    exit 0
}

error() {
    printf "error: %s\n" "$1" 1>&2
    ${2:+exit $2}
}

orientate () {
    # locate the upnup directory
    # Try from environment setting first
    upnupdir="${UPNUP_DIR}"
    [[ -d "$upnupdir" ]] && continue
    # Try some common locations
    local d
    for d in $HOME/{.local/share,.config}/upnup /usr{,/local}/share/upnup /etc/upnup; do
        if [[ -d "$d" ]]; then
            upnupdir="$d"
            return
        fi
    done
    error "unable to locate upnup configuration directory"
    echo "note: if you installed to a non-standard location, set the UPNUP_DIR environment variable to point to the {DATADIR}/upnup directory"
    exit 5
}

main () {
    orientate
    args=("$@")
    user=$USER
    year=$(date +%Y)
    # arrays for use with checks below
    license_list="$(find "$upnupdir/licenses" | sed 1d | awk -F '/' '{ print $NF }' | sort)"
    # for use with l flag
    lcs_list=( agpl-3.0 apache-2.0 bsd-2-clause bsd-3-clause bsl-1.0 cc0-1.0 cc0-3.0 cc0-4.0 epl-2.0 gpl-2.0 gpl-3.0 lgpl-2.1 mit mpl-2.0 unlicense )
    # list of licensenses that have [year] and [fullname] fields
    mod_list=( agpl-3.0 bsd-2-clause bsd-3-clause mit )
    # for use with -f flag
    header_list=( agpl-3.0 apache-2.0 cc0-1.0 cc0-3.0 cc0-4.0 gpl-2.0 gpl-3.0 lgpl-2.1 lgpl-3.0 )

    if [[ $# -lt 1 ]] ; then
        printhelp
    fi

    # loops through all arguments
    # used instead of getopts because l and p flags have no '-' character
    for (( i = 0; i < $#; i++ )) ; do
        # grabs the following argument
        j=$((i + 1))

        # overwrites user and/or year variables if respective flag is invoked
        if [[ "${args[$i]}" == '-u' || "${args[$i]}" == '--user' ]] ; then
            user="${args[$j]}"
        elif [[ "${args[$i]}" == '-y' || "${args[$i]}" == '--year' ]] ; then
            year="${args[$j]}"

        # -f flag only creates headers in specified file following p flag
        # -f flag does not create LICENSE file
        elif [[ "${args[$i]}" == '-f' || "${args[$i]}" == '--file' ]] ; then
            if [ "${args[$j]}" == '' ] ; then
                printf "%s\n" "error: missing required argument \`header_file'"
                exit 1
            fi

            # headerfile is argument directly following -f flag
            headerfile="${args[$j]}"
            if [[ ! "${header_list[*]}" =~ ${headerfile} ]] ; then
                printf "%s\n" "error: requested headerfile is not supported"
                exit 1
            fi

            # inner loop that then checks all arguments again,
            # mainly looking for p flag and file to add headers to
            for (( k = 0; k < $#; k++ )) ; do
                # grabs next argument after p flag,
                # this is the file to have headers added to
                m=$((k + 1))
                if [[ "${args[$k]}" == 'p' || "${args[$k]}" == 'put' ]] ; then
                    if [ "${args[$m]}" == '' ] ; then
                        printf "%s\n" "error: missing required argument \`license'"
                        exit 1
                    else
                        # determines file type by parsing argument following p
                        # flag through awk (anything after last '.' character is
                        # passed to anotta as filetype)
                        filetype=$(printf "%s\n" "${args[$m]}" | awk -F '.' '{ print $NF }')
                        outputfile="${args[$m]}"
                        annota block "${filetype}" "$upnupdir/headers/${headerfile}" "${outputfile}" -u "${user}" -y "${year}"
                        exit 0
                    fi
                fi
            done

        # p flag without -f flag indicates basic functionality of generating LICENSE
        elif [[ "${args[$i]}" == 'p' || "${args[$i]}" == 'put' ]] ; then
            if [ "${args[$j]}" == '' ] ; then
                printf "%s\n" "error: missing required argument \`license'"
                exit 1
            else

                # loops over $lcs_list array to see if argument passed to p flag exists
                if [[ ! "${lcs_list[*]}" =~ ${args[$j]} ]] ; then
                    printf "%s\n" "error: ${args[$j]} is not an included \`license"
                    exit 1
                fi
                # adds $user and/or $year if the passed LICENSE file is in the $mod_list array
                # more easily accomplished with sponge, but didn't want to include more depencies...
                if [[ "${mod_list[*]}" =~ ${args[$j]} ]] ; then
                    cp "$upnupdir"/licenses/"${args[$j]}" ./tmp
                    sed "0,/\[year\]/s/\[year\]/$year/" ./tmp > tmp2
                    sed "0,/\[fullname\]/s/\[fullname\]/$user/" ./tmp2 > LICENSE
                    rm tmp tmp2
                # if the LICENSE file doesn't have [year] or [fullname] fields,
                # it simply copies the LICENSE to this current directory
                else
                    cp "$upnupdir"/licenses/"${args[$j]}" ./LICENSE
                fi
            exit 0
            fi

        elif [[ "${args[$i]}" == 'l' || "${args[$i]}" == 'list' ]] ; then
            printf "%s\n" "$license_list"
            exit 0

        elif [[ "${args[$i]}" == '-h' || "${args[$i]}" == '--help' ]] ; then
            printhelp
        elif [[ "${args[$i]}" == '-V' || "${args[$i]}" == '--version' ]] ; then
            printf "%s\n" "0.0.1"
            exit 0
        fi
    done
}

main "$@"
